{"ast":null,"code":"var _jsxFileName = \"/Users/alvinlong/Desktop/Winter2024/ensf381/ENSF_381_Assignment_5/frontend/src/component/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\n\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authenticated, setAuthenticated] = useState(false);\n  const login = async (username, password) => {\n    try {\n      // Send a request to your backend API to authenticate the user\n      const response = await fetch('http://example.com/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      // Check if the response is successful (e.g., HTTP status code 200)\n      if (response.ok) {\n        // If authentication is successful, update the authenticated state\n        setAuthenticated(true);\n        // You may also store additional user information in localStorage or sessionStorage\n        // Example: localStorage.setItem('token', '...');\n      } else {\n        // If authentication fails, handle the error (e.g., display error message)\n        // You can customize this based on your backend response format\n        console.error('Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"zbs8MFqNgUfPgDkZLeejYXFpdoQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authenticated","setAuthenticated","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","console","error","Provider","value","logout","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/alvinlong/Desktop/Winter2024/ensf381/ENSF_381_Assignment_5/frontend/src/component/AuthContext.js"],"sourcesContent":["// AuthContext.js\n\nimport React, { createContext, useState, useContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [authenticated, setAuthenticated] = useState(false);\n\n  const login = async (username, password) => {\n    try {\n      // Send a request to your backend API to authenticate the user\n      const response = await fetch('http://example.com/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      // Check if the response is successful (e.g., HTTP status code 200)\n      if (response.ok) {\n        // If authentication is successful, update the authenticated state\n        setAuthenticated(true);\n        // You may also store additional user information in localStorage or sessionStorage\n        // Example: localStorage.setItem('token', '...');\n      } else {\n        // If authentication fails, handle the error (e.g., display error message)\n        // You can customize this based on your backend response format\n        console.error('Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ authenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMU,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;;MAEF;MACA,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACf;QACAX,gBAAgB,CAAC,IAAI,CAAC;QACtB;QACA;MACF,CAAC,MAAM;QACL;QACA;QACAY,OAAO,CAACC,KAAK,CAAC,cAAc,CAAC;MAC/B;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACtC;EACF,CAAC;EAED,oBACEnB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,aAAa;MAAEE,KAAK;MAAEe;IAAO,CAAE;IAAAnB,QAAA,EAC3DA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtB,EAAA,CAnCWF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAqCzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM/B,UAAU,CAACG,WAAW,CAAC;AAAA;AAAC4B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}